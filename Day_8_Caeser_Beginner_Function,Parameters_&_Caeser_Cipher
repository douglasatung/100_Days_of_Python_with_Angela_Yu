#1. MORE FUNCTIONS

#We will create a function call greet with three lines of print statements inside the functions.

#def greet(name):
#  print(f"Hello {name}")
#  print(f"How are you doing Mr. {name}")
#  print(f"Trust that the weather is nice Mr. {name}?")

#greet("Atung")

#2. POSITIONAL VS KEYWORD ARGUMENTS

#Functions with more than one inputs

def greet_with(name, location):
  print(f"Hello {name}")
  print(f"What is it like in {location}")
  
#greet_with("Atung", "Abuja")

#Keyword argument is used in the aspect of positional argument.

#greet_with(location = "Abuja", name="Atung")

# 3. [Interactive Coding Exercise] Paint Area Calculator

def paint_calc(height, width, cover):
  cans = (height*width)/cover
  print(f"You will need {cans} cans of paint")

import math

def paint_calc(height, width, cover):
  num_cans = (height*width)/cover
  round_up_cans = math.ceil(num_cans)
  print(f"You'll need {round_up_cans} cans of paint.")

test_h = int(input("Height of wall: "))
test_w = int(input("Width of wall: "))
coverage = 5
paint_calc(height=test_h, width=test_w, cover=coverage)

#def checkprime(n):
#  flag = False
#  for i in range(2,n):
 #   if n%i == 0:
 #     flag = True
  #    break
 # if flag:
 #       print("Given number is not prime")
 # else:
 #   print("Number is prime")

#p = checkprime(11)

def prime_checker(number):
  is_prime = True
  for i in range(2, number):
    if number % i == 0:
      is_prime = False
  if is_prime:
    print("It's a prime number.")
  else:
    print("It's not a prime number.")

#Inputing the code for the numbers

n = int(input("Check this number: "))
prime_checker(number=n)

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']


#creating a new function call caeser
def caesar(start_text, shift_amount, cipher_direction):
  end_text = ""
  if cipher_direction == "decode":
    shift_amount *= -1
  for char in start_text:
    if char in alphabet:
      position = alphabet.index(char)
      new_position = position + shift_amount
      end_text += alphabet[new_position]
    else:
      end_code += char
  print(f"Here's the {cipher_direction}d result: {end_text}")  

#TODO-1: Import and print the logo from art.py when the program starts.
#from art import logo
#print(logo)
should_continue = True
while should_continue:
  direction = input("Type 'encode' to encrypt, type 'decode' to decrypt\n")
  
  text = input("Type your message:\n").lower()
  shift = int(input("Type the shift number:\n"))
  
  #Calling the caeser() function, passing over the 'text', 'shift' and 'direction' values.
  
  shift = shift % 26
  caesar(start_text=text, shift_amount=shift, cipher_direction=direction)
  result = input("Type 'yes' if you want to go again. Otherwise type no.\n")
  if result == "no":
    should_continue = False
    print("Goodbye")
  
