DAY 9 WITH ANGELA YU
'''9.1 - DICTIONARIES
#Dictionaries in python also work like dictionaries in real life.
 - Dictionaries are really useful because they allow to group together and tag related pieces of information.
- Every dictionaries has two parts to it: Key of the left hand side and the value on the right hand side

#Dictionary coding examples
#Note: Every dictionary word start inside the curly brackets {}.
#Note: Every dictionary word is separated with a comma , 
#Note: Every dictionary word is made up of two parts: Key and Value
programming_dictionary = {
  "Bug": "An error in a program that prevents the program from running as expected.",
  "Function": "A piece of code that you can easily call over and over again.",
}

#Retrieving items from a dictionary: This is equivalent to retrieving an item from a list of items.
#Here we are to call the Key of any of the item on the list of dictionaries, then call the value of that key for example.

#print(programming_dictionary["Bug"])

#To add a new itemto the dictionary
#Statement: In order to add a new item to the dictionary, we have to create a new key as a list inside the programming_dictionary and the add the value of the new key.
programming_dictionary["Loop"] = "The action of doing something over and over again."
print(programming_dictionary)

#Creating of an empty dictionary
#Statement: We often should create an empty dictionary at the beginning of the program.
#After creating an empty dictionary, we can add items to the empty dictionary at a later stage of the program.

empty_dictionary = {}

#We can also wipe an existing dictionary just by assigning that dictionary to an empty curly bracket

#programming_dictionary = {}

#Editing an item in a dictionary
#Statement: We can edit an item in a dictionary by calling the key of the item by assigning the new value to the key. We are redefining the Key "Bug" to the new value "A moth in your computer."

programming_dictionary["Bug"] = "A moth in your computer"

#Looping through a dictionary
#Statement: We can loop through a dictionary by using a for loop to go through each of the keys in the dictionary and the print out each key and their values

for key in programming_dictionary:
  print(key)
  print(programming_dictionary[key])
print(programming_dictionary)'''

'''9.2 - GRADING PROGRAM
#In this exercise, we will create a grading program.
student_scores = {
  "Hart" : 81,
  "Ron" : 78,
  "Hermione" : 99,
  "Draco" : 74,
  "Neville" : 62,
}

#TODO - 1: Create an empty dictionary called student_grades.
student_grades = {}
#Creating a for loop that loops into the student's scores
for student in student_scores:
  score = student_scores[student]

#Converting the student's scores into grades
  if score > 90:
    student_grades[student] = "Outstanding"
  elif score > 80:
    student_grades[student] = "Exceeds Expectations"
  elif score > 70:
    student_grades[student] = "Acceptable"
  else:
    student_grades[student] = "Fail"

print(student_grades)'''

'''9.3 - NESTING'''
#Statement: We will nest a list inside a dictionary, also, we will nest a dictionary inside a dictionary also.

capitals = {
  "France": "Paris",
  "Germany": "Berlin",
}

#To nest a list in a Dictionary
#Statement: We can nest a list in a dictionary
travel_log = {
  "France": ["Paris", "Lille", "Dijon"],
  "Germany": ["Berlin", "Hamburg", "Stuttgart"]
}

#To nest a dictionary in a dictionary
#Class work
city_travel = {
  "France": {
    "Paris" : "County - 1", 
    "Lille" : "County - 2", 
    "Dijon" : "County - 3",
  },
  "Germany": ["Berlin", "Hamburg", "Stuttgart"],
}

#Solution to classwork
'''Travel_log = {
  "France": {"cities_visited": ["Paris", "Lille", "Dijon"], "total_visits": 12}}
"Germany": {"cities_visited": ["Berlin", "Hamburg", "Stuttgart"], "total_visits": 5},
}'''
#Nesting a dictionary inside a list
#Statement: We can nest a dictionary inside a list as stated below;

Travel_log3 = [
  {
    "country": "France",
    "cities_visited": ["Paris", "Lille", "Dijon"],
    "total_visits": 12
  },
  {
    "country": "Germany",
    "cities_visited": ["Berlin", "Hamburg", "Stuttgart"],
    "total_visits": 5
  },
]

#Exercise: Create a function that adds countries that you travel into your travel log.

visits = int(input("How many times have you been to this country? "))
list_of_cities = eval(input("What cities have you been to? "))

travel_log = [
  {
    "country" : "France",
    "visits" : 12,
    "cities" : ["Paris", "Lille", "Dijon"]
  },
  {
    "country" : "Germany",
    "visits" : 5,
    "cities" : ["Berlin", "Hamburg", "Stuttgart"]
  },
]
def add_new_country(name, times_visited, cities_visited):
  new_country = {}
  new_country["country"] = name
  travel_log.append(new_country)


add_new_country(country, visits, list_of_cities)
print(f"I've been to {travel_log[2]['country']} {travel_log[2]['visits']} times.")
print(f"My favourite city was {travel_log[2]['cities'][0]}.")

'''9.4 - SECRET AUCTION PROGRAM'''

from replit import clear

from art import logo
print(logo)

bids = {}
bidding_finished = False

def find_highest_bidder(bidding_record):
  highest_bid = 0
  winner = ""
  # bidding_record = {"Angela": 123, "James": 321}
  for bidder in bidding_record:
    bid_amount = bidding_record[bidder]
    if bid_amount > highest_bid:
      highest_bid = bid_amount
      winner = bidder
  print(f"The winner is {winner} with a bid of ${highest_bid}")


while not bidding_finished:
  name = input("What is your name?: ")
  price = int(input("What is your bid?: $"))
  bids[name] = price
  should_continue = input("Are there any other bidders? Type 'yes' or 'no'.\n")
  if should_continue == "no":
    bidding_finished = True
  elif should_continue == "yes":
    clear()
